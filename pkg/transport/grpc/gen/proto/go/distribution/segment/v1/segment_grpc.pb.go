// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package distributionv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IteratorServiceClient is the client API for IteratorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IteratorServiceClient interface {
	Iterate(ctx context.Context, opts ...grpc.CallOption) (IteratorService_IterateClient, error)
}

type iteratorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIteratorServiceClient(cc grpc.ClientConnInterface) IteratorServiceClient {
	return &iteratorServiceClient{cc}
}

func (c *iteratorServiceClient) Iterate(ctx context.Context, opts ...grpc.CallOption) (IteratorService_IterateClient, error) {
	stream, err := c.cc.NewStream(ctx, &IteratorService_ServiceDesc.Streams[0], "/distribution.v1.IteratorService/Iterate", opts...)
	if err != nil {
		return nil, err
	}
	x := &iteratorServiceIterateClient{stream}
	return x, nil
}

type IteratorService_IterateClient interface {
	Send(*IteratorRequest) error
	Recv() (*IteratorResponse, error)
	grpc.ClientStream
}

type iteratorServiceIterateClient struct {
	grpc.ClientStream
}

func (x *iteratorServiceIterateClient) Send(m *IteratorRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *iteratorServiceIterateClient) Recv() (*IteratorResponse, error) {
	m := new(IteratorResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IteratorServiceServer is the server API for IteratorService service.
// All implementations should embed UnimplementedIteratorServiceServer
// for forward compatibility
type IteratorServiceServer interface {
	Iterate(IteratorService_IterateServer) error
}

// UnimplementedIteratorServiceServer should be embedded to have forward compatible implementations.
type UnimplementedIteratorServiceServer struct {
}

func (UnimplementedIteratorServiceServer) Iterate(IteratorService_IterateServer) error {
	return status.Errorf(codes.Unimplemented, "method Iterate not implemented")
}

// UnsafeIteratorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IteratorServiceServer will
// result in compilation errors.
type UnsafeIteratorServiceServer interface {
	mustEmbedUnimplementedIteratorServiceServer()
}

func RegisterIteratorServiceServer(s grpc.ServiceRegistrar, srv IteratorServiceServer) {
	s.RegisterService(&IteratorService_ServiceDesc, srv)
}

func _IteratorService_Iterate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IteratorServiceServer).Iterate(&iteratorServiceIterateServer{stream})
}

type IteratorService_IterateServer interface {
	Send(*IteratorResponse) error
	Recv() (*IteratorRequest, error)
	grpc.ServerStream
}

type iteratorServiceIterateServer struct {
	grpc.ServerStream
}

func (x *iteratorServiceIterateServer) Send(m *IteratorResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *iteratorServiceIterateServer) Recv() (*IteratorRequest, error) {
	m := new(IteratorRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IteratorService_ServiceDesc is the grpc.ServiceDesc for IteratorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IteratorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "distribution.v1.IteratorService",
	HandlerType: (*IteratorServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Iterate",
			Handler:       _IteratorService_Iterate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "distribution/segment/v1/segment.proto",
}

// WriterServiceClient is the client API for WriterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WriterServiceClient interface {
	Write(ctx context.Context, opts ...grpc.CallOption) (WriterService_WriteClient, error)
}

type writerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWriterServiceClient(cc grpc.ClientConnInterface) WriterServiceClient {
	return &writerServiceClient{cc}
}

func (c *writerServiceClient) Write(ctx context.Context, opts ...grpc.CallOption) (WriterService_WriteClient, error) {
	stream, err := c.cc.NewStream(ctx, &WriterService_ServiceDesc.Streams[0], "/distribution.v1.WriterService/Write", opts...)
	if err != nil {
		return nil, err
	}
	x := &writerServiceWriteClient{stream}
	return x, nil
}

type WriterService_WriteClient interface {
	Send(*WriterRequest) error
	Recv() (*WriterResponse, error)
	grpc.ClientStream
}

type writerServiceWriteClient struct {
	grpc.ClientStream
}

func (x *writerServiceWriteClient) Send(m *WriterRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *writerServiceWriteClient) Recv() (*WriterResponse, error) {
	m := new(WriterResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WriterServiceServer is the server API for WriterService service.
// All implementations should embed UnimplementedWriterServiceServer
// for forward compatibility
type WriterServiceServer interface {
	Write(WriterService_WriteServer) error
}

// UnimplementedWriterServiceServer should be embedded to have forward compatible implementations.
type UnimplementedWriterServiceServer struct {
}

func (UnimplementedWriterServiceServer) Write(WriterService_WriteServer) error {
	return status.Errorf(codes.Unimplemented, "method Write not implemented")
}

// UnsafeWriterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WriterServiceServer will
// result in compilation errors.
type UnsafeWriterServiceServer interface {
	mustEmbedUnimplementedWriterServiceServer()
}

func RegisterWriterServiceServer(s grpc.ServiceRegistrar, srv WriterServiceServer) {
	s.RegisterService(&WriterService_ServiceDesc, srv)
}

func _WriterService_Write_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WriterServiceServer).Write(&writerServiceWriteServer{stream})
}

type WriterService_WriteServer interface {
	Send(*WriterResponse) error
	Recv() (*WriterRequest, error)
	grpc.ServerStream
}

type writerServiceWriteServer struct {
	grpc.ServerStream
}

func (x *writerServiceWriteServer) Send(m *WriterResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *writerServiceWriteServer) Recv() (*WriterRequest, error) {
	m := new(WriterRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WriterService_ServiceDesc is the grpc.ServiceDesc for WriterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WriterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "distribution.v1.WriterService",
	HandlerType: (*WriterServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Write",
			Handler:       _WriterService_Write_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "distribution/segment/v1/segment.proto",
}
